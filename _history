{"entries":[{"timestamp":1757933776166,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":185,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":147,"diffs":[[1,""]]},{"start1":1,"length1":2915,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":227,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1757933782624,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":110,"length1":129,"diffs":[[1,"        \"microphone\": \"*\"\n"]]}]}]},{"timestamp":1757939078387,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2939,"length1":5,"diffs":[[1,""]]}]}]},{"timestamp":1757951238910,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2939,"length1":6,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1757951241601,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":365,"length1":36,"diffs":[[1,"type TemperatureHumidity = [number, number]\n"]]},{"start1":2821,"length1":0,"diffs":[[1,"\n\nlet dht = DHT22.create(DigitalPin.P0)\nbasic.forever(function () {\n    let th = dht.read()\n    basic.showString(\"T\")\n    l\n    basic.showNumber(th[Temperature])\n    basic.showString(\"H\")\n    basic.showNumber(th[Humidity])\n    basic.pause(3000)\n})\n"]]}]}]},{"timestamp":1757951967410,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2650,"length1":26,"diffs":[[1,""]]}]}]},{"timestamp":1757951968520,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":4807,"diffs":[[1,"////////////////////\n//################//\n//##            ##//\n//##  dht22.ts  ##//\n//##            ##//\n//################//\n////////////////////\n\n/*\nThe DHT code is a refactory of an older version of the tinkertanker library:\nhttps://github.com/tinkertanker/pxt-iot-environment-kit/releases/tag/v5.2.7\n(MIT-license)\nNote that the latest release does not work\n*/\n\ntype TemperatureHumidity = number[]\n\nconst Temperature = 0\nconst Humidity = 1\n\nnamespace DHT22 {\n\n    export class Device {\n\n        pin: DigitalPin\n\n        constructor(pin: DigitalPin) {\n            this.pin = pin\n        }\n\n        read(): TemperatureHumidity {\n            const timeout = 100\n            const buffer = pins.createBuffer(40)\n            const data = [0, 0, 0, 0, 0]\n            let temp = 0\n            let hum = 0\n            let startTime = control.micros()\n\n            // 1.start signal\n            pins.digitalWritePin(this.pin, 0)\n            basic.pause(18)\n\n            // 2.pull up and wait 40us\n            pins.setPull(this.pin, PinPullMode.PullUp)\n            pins.digitalReadPin(this.pin)\n            control.waitMicros(40)\n\n            // 3.read data\n            startTime = control.micros()\n            while (pins.digitalReadPin(this.pin) === 0) {\n                if (control.micros() - startTime > timeout) break\n            }\n            startTime = control.micros()\n            while (pins.digitalReadPin(this.pin) === 1) {\n                if (control.micros() - startTime > timeout) break\n            }\n\n            for (let dataBits = 0; dataBits < 40; dataBits++) {\n                startTime = control.micros()\n                while (pins.digitalReadPin(this.pin) === 1) {\n                    if (control.micros() - startTime > timeout) break\n                }\n                startTime = control.micros()\n                while (pins.digitalReadPin(this.pin) === 0) {\n                    if (control.micros() - startTime > timeout) break\n                }\n                control.waitMicros(28)\n                if (pins.digitalReadPin(this.pin) === 1) {\n                    buffer[dataBits] = 1\n                }\n            }\n\n            for (let i = 0; i < 5; i++) {\n                for (let j = 0; j < 8; j++) {\n                    if (buffer[8 * i + j] === 1) {\n                        data[i] += 2 ** (7 - j)\n                    }\n                }\n            }\n\n            if (((data[0] + data[1] + data[2] + data[3]) & 0xff) === data[4]) {\n                hum = (data[0] << 8) | data[1]\n                hum *= 0.1\n                temp = data[2] + data[3] * 0.1\n            }\n            let dht22: TemperatureHumidity = [temp, hum]\n            dht22 = [1,2]\n            return dht22\n        }\n    }\n\n    export function create(pin: DigitalPin): Device {\n        let device = new Device(pin)\n        return device\n    }\n}\n"]]}]}]},{"timestamp":1757952528108,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":54,"diffs":[[1,"// 0: stop playing\r\n// 1: start playing\r\n// 2: pause playing\r\n"]]},{"start1":64,"length1":93,"diffs":[[1,"// 100-500: transposing = value - 300\r\n"]]},{"start1":105,"length1":68,"diffs":[[1,"// 1000-1199: instrument partiture 1\r\n// 1200-1399: instrument partiture 2\r\n// 1400-1599: instrument partiture 3\r\n// 1600-1799: instrument partiture 4\r\n// 1800-1999: instrument partiture 5\r\n"]]},{"start1":297,"length1":171,"diffs":[[1,"// 2000-2199: volume partiture 1\r\n// 2200-2399: volume partiture 2\r\n// 2400-2599: volume partiture 3\r\n// 2600-2799: volume partiture 4\r\n// 2800-2999: volume partiture 5\r\n"]]},{"start1":469,"length1":88,"diffs":[[1,"// > 3000: duration = value - 3000\r\n"]]},{"start1":507,"length1":486,"diffs":[[1,"let MEASURE = 0\r\n"]]},{"start1":526,"length1":286,"diffs":[[1,"enum Movement {\r\n    //% block=\"move 1\"\r\n    Move1,\r\n    //% block=\"move 2\"\r\n    Move2,\r\n    //% block=\"move 3\"\r\n    Move3,\r\n    //% block=\"move 4\"\r\n    Move4,\r\n    //% block=\"move 5\"\r\n    Move5,\r\n    //% block=\"move 6\"\r\n    Move6,\r\n    //% block=\"move 7\"\r\n    Move7,\r\n    //% block=\"move 8\"\r\n    Move8,\r\n    //% block=\"move 9\"\r\n    Move9,\r\n    //% block=\"move 10\"\r\n    Move10,\r\n    //% block=\"move 11\"\r\n    Move11,\r\n    //% block=\"move 12\"\r\n    Move12,\r\n    //% block=\"move 13\"\r\n    Move13,\r\n    //% block=\"move 14\"\r\n    Move14,\r\n    //% block=\"move 15\"\r\n    Move15,\r\n    //% block=\"move 16\"\r\n    Move16,\r\n    //% block=\"move 17\"\r\n    Move17,\r\n    //% block=\"move 18\"\r\n    Move18,\r\n    //% block=\"move 19\"\r\n    Move19,\r\n    //% block=\"move 20\"\r\n    Move20,\r\n"]]},{"start1":1290,"length1":195,"diffs":[[1,"let doMove1: handler\r\nlet doMove2: handler\r\nlet doMove3: handler\r\nlet doMove4: handler\r\nlet doMove5: handler\r\nlet doMove6: handler\r\nlet doMove7: handler\r\nlet doMove8: handler\r\nlet doMove9: handler\r\nlet doMove10: handler\r\nlet doMove11: handler\r\nlet doMove12: handler\r\nlet doMove13: handler\r\nlet doMove14: handler\r\nlet doMove15: handler\r\nlet doMove16: handler\r\nlet doMove17: handler\r\nlet doMove18: handler\r\nlet doMove19: handler\r\nlet doMove20: handler\r\n"]]},{"start1":1743,"length1":233,"diffs":[[1,"let moves: number[][] = []\r\n"]]},{"start1":1773,"length1":1751,"diffs":[[1,"radio.onReceivedNumber(function (cmd: number) {\r\n    if (cmd >= 0) return;\r\n    MEASURE = -cmd\r\n    for (let i = 0; i < moves.length; i++) {\r\n        if (moves[i][0] == MEASURE) {\r\n            switch (moves[i][1]) {\r\n                case Move.Move1: doMove1(); break;\r\n                case Move.Move2: doMove2(); break;\r\n                case Move.Move3: doMove3(); break;\r\n                case Move.Move4: doMove4(); break;\r\n                case Move.Move5: doMove5(); break;\r\n                case Move.Move6: doMove6(); break;\r\n                case Move.Move7: doMove7(); break;\r\n                case Move.Move8: doMove8(); break;\r\n                case Move.Move9: doMove9(); break;\r\n                case Move.Move10: doMove10(); break;\r\n                case Move.Move11: doMove11(); break;\r\n                case Move.Move12: doMove12(); break;\r\n                case Move.Move13: doMove13(); break;\r\n                case Move.Move14: doMove14(); break;\r\n                case Move.Move15: doMove15(); break;\r\n                case Move.Move16: doMove16(); break;\r\n                case Move.Move17: doMove17(); break;\r\n                case Move.Move18: doMove18(); break;\r\n                case Move.Move19: doMove19(); break;\r\n                case Move.Move20: doMove20(); break;\r\n"]]},{"start1":3067,"length1":1063,"diffs":[[1,""]]},{"start1":3085,"length1":161,"diffs":[[1,""]]},{"start1":3091,"length1":2983,"diffs":[[1,"//% color=\"#47D45A\" icon=\"\\uf001\"\r\n//% block=\"Midi\"\r\n//% block.loc.nl=\"Midi\"\r\nnamespace Midi {\r\n"]]},{"start1":3189,"length1":263,"diffs":[[1,"    //% block=\"measure number\"\r\n    //% block.loc.nl=\"maatnummer\"\r\n    export function measure(): number {\r\n        return MEASURE\r\n"]]},{"start1":3330,"length1":1498,"diffs":[[1,"    //% block=\"do for %move\"\r\n    //% block.loc.nl=\"doe voor %move\"\r\n    export function onMove(move: Move, code: handler): void {\r\n        switch (move) {\r\n            case Move.Move1: doMove1 = code; break;\r\n            case Move.Move2: doMove2 = code; break;\r\n            case Move.Move3: doMove3 = code; break;\r\n            case Move.Move4: doMove4 = code; break;\r\n            case Move.Move5: doMove5 = code; break;\r\n            case Move.Move6: doMove6 = code; break;\r\n            case Move.Move7: doMove7 = code; break;\r\n            case Move.Move8: doMove8 = code; break;\r\n            case Move.Move9: doMove9 = code; break;\r\n            case Move.Move10: doMove10 = code; break;\r\n            case Move.Move11: doMove11 = code; break;\r\n            case Move.Move12: doMove12 = code; break;\r\n            case Move.Move13: doMove13 = code; break;\r\n            case Move.Move14: doMove14 = code; break;\r\n            case Move.Move15: doMove15 = code; break;\r\n            case Move.Move16: doMove16 = code; break;\r\n            case Move.Move17: doMove17 = code; break;\r\n            case Move.Move18: doMove18 = code; break;\r\n            case Move.Move19: doMove19 = code; break;\r\n            case Move.Move20: doMove20 = code; break;\r\n"]]},{"start1":4589,"length1":155,"diffs":[[1,"    //% block=\"perform at measure %measure %move\"\r\n    //% block.loc.nl=\"voer op maat %measure %move uit\"\r\n    export function measureMove(measure: number, move: Move) {\r\n        moves.push([measure, move])\r\n"]]},{"start1":4804,"length1":5323,"diffs":[[1,"}\r\n"]]}]}]},{"timestamp":1757952979971,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"serial.redirect(SerialPin.P14, SerialPin.P13, 31250)\r\n\r\nlet TEMPO = 1.0     // normal tempo * 1\r\nlet TONE = 0        // midi notes up(+) or down(-)\r\n\r\nlet TUNENOTES: number[][]\r\nlet MEASURE: number\r\nlet CURMEASURE = 0\r\n\r\nconst TUNE_PART = 0\r\nconst TUNE_START = 1\r\nconst TUNE_DURA = 2\r\nconst NOTE_OFF = 0\r\nconst CHORD_ROOT = 3\r\nconst CHORD_MAX = 9\r\nconst PART_MAX = 5\r\nconst NOTE_PAUSE = 127\r\n\r\nlet MIDIRESTART = true\r\nlet MIDIREPEAT = false\r\nlet MIDIPLAY = false\r\nlet MIDINOTE = 0\r\n\r\nlet midinotes =\r\n    [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 1\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 2\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 3\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 4\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 5\r\n    ]\r\n\r\nlet partinstrument = [0, 0, 0, 0, 0]\r\nlet partvolume = [0, 0, 0, 0, 0]\r\n\r\nfunction noteOn(note: number, volume: number) {\r\n    let buffer = pins.createBuffer(3)\r\n    buffer.setUint8(0, 0x90)\r\n    buffer.setUint8(1, note)\r\n    buffer.setUint8(2, volume)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nfunction noteOff(note: number) {\r\n    let buffer = pins.createBuffer(3)\r\n    buffer.setUint8(0, 0x80)\r\n    buffer.setUint8(1, note)\r\n    buffer.setUint8(2, 0)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nfunction percussionOn(instrument: number, volume: number) {\r\n    let buffer = pins.createBuffer(3)\r\n    buffer.setUint8(0, 0x99)\r\n    buffer.setUint8(1, instrument)\r\n    buffer.setUint8(2, volume)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nfunction persussionOff(instrument: number) {\r\n    let buffer = pins.createBuffer(3)\r\n    buffer.setUint8(0, 0x89)\r\n    buffer.setUint8(1, instrument)\r\n    buffer.setUint8(2, 0)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nfunction instrument(instr: number) {\r\n    let buffer = pins.createBuffer(2)\r\n    buffer.setUint8(0, 0xC0)\r\n    buffer.setUint8(1, instr)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nlet part = -1\r\nlet tone = 0\r\nlet tm_start = control.millis()\r\nlet tm_pause = control.millis()\r\nlet tm = control.millis()\r\n\r\nbasic.forever(function () {\r\n\r\n    if (!MIDIPLAY) return\r\n\r\n    if (MIDIRESTART) {\r\n        MIDIRESTART = false\r\n        part = -1\r\n        tone = 0\r\n        tm_pause = 0\r\n        tm_start = control.millis()\r\n    }\r\n\r\n    tm = control.millis();\r\n\r\n    if (tm >= tm_start + TEMPO * TUNENOTES[MIDINOTE][TUNE_START]) {\r\n        tone = TONE;\r\n        part = TUNENOTES[MIDINOTE][TUNE_PART] - 1;\r\n        for (let i = CHORD_ROOT; i < CHORD_MAX; i++) {\r\n            if (midinotes[part][i] >= 0 && midinotes[part][i] < NOTE_PAUSE)\r\n                noteOff(midinotes[part][i]);\r\n            midinotes[part][i] = TUNENOTES[MIDINOTE][i];\r\n        }\r\n        midinotes[part][NOTE_OFF] = tm_start +\r\n            TEMPO * (TUNENOTES[MIDINOTE][TUNE_START] + TUNENOTES[MIDINOTE][TUNE_DURA]);\r\n        for (let i = CHORD_ROOT; i < CHORD_MAX; i++)\r\n            if (midinotes[part][i] >= 0 && midinotes[part][i] < NOTE_PAUSE) {\r\n                midinotes[part][i] = midinotes[part][i] + TONE;\r\n                if (partinstrument[part] < 0)\r\n                    percussionOn(-partinstrument[part], partvolume[part]);\r\n                else\r\n                    instrument(partinstrument[part]);\r\n                noteOn(midinotes[part][i], partvolume[part]);\r\n            }\r\n        MIDINOTE += 1;\r\n\r\n        if (TUNENOTES[MIDINOTE][TUNE_PART] < 0) {\r\n            // let MIDINOTE notes finish\r\n            let cnt = 0;\r\n            while (MIDIPLAY && (cnt < 5)) {\r\n                cnt = 0;\r\n                for (part = 0; part < PART_MAX; part++) {\r\n                    if (midinotes[part][NOTE_OFF]) {\r\n                        if (midinotes[part][NOTE_OFF] < control.millis()) {\r\n                            for (let i = CHORD_ROOT; i < CHORD_MAX; i++)\r\n                                noteOff(midinotes[part][i]);\r\n                            midinotes[part][NOTE_OFF] = 0;\r\n                            cnt += 1;\r\n                        }\r\n                    }\r\n                    else\r\n                        cnt += 1;\r\n                }\r\n            }\r\n\r\n            MIDIRESTART = true;\r\n            MIDINOTE = 0\r\n            if (MIDIREPEAT) {\r\n                MidiController.stop()\r\n                basic.pause(500)\r\n                MidiController.start()\r\n            }\r\n            else\r\n                MidiController.stop()\r\n        }\r\n    }\r\n\r\n    let cur = Math.floor((tm - tm_start) / MEASURE) + 1\r\n    if (CURMEASURE != cur) {\r\n        CURMEASURE = cur\r\n        radio.sendNumber(-CURMEASURE)\r\n    }\r\n})\r\n\r\nenum Instrument {\r\n    //% block=\"piano\"\r\n    //% block.loc.nl=\"piano\"\r\n    Piano = 0,\r\n    //% block=\"synthesizer\"\r\n    //% block.loc.nl=\"synthesizer\"\r\n    Synthesizer = 50,\r\n    //% block=\"organ\"\r\n    //% block.loc.nl=\"orgel\"\r\n    Organ = 19,\r\n    //% block=\"guitar\"\r\n    //% block.loc.nl=\"gitaar\"\r\n    Guitar = 25,\r\n    //% block=\"electric guitar\"\r\n    //% block.loc.nl=\"electrische gitaar\"\r\n    ElGuitar = 26,\r\n    //% block=\"banjo\"\r\n    //% block.loc.nl=\"banjo\"\r\n    Banjo = 105,\r\n    //% block=\"harp\"\r\n    //% block.loc.nl=\"harp\"\r\n    Harp = 46,\r\n    //% block=\"violin\"\r\n    //% block.loc.nl=\"viool\"\r\n    Violin = 40,\r\n    //% block=\"cello\"\r\n    //% block.loc.nl=\"cello\"\r\n    Cello = 42,\r\n    //% block=\"oboe\"\r\n    //% block.loc.nl=\"hobo\"\r\n    Oboe = 68,\r\n    //% block=\"clarinet\"\r\n    //% block.loc.nl=\"klarinet\"\r\n    Clarinet = 71,\r\n    //% block=\"trumpet\"\r\n    //% block.loc.nl=\"trompet\"\r\n    Trumpet = 56,\r\n    //% block=\"trombone\"\r\n    //% block.loc.nl=\"trombone\"\r\n    Trombone = 57,\r\n    //% block=\"horn\"\r\n    //% block.loc.nl=\"hoorn\"\r\n    Horn = 60,\r\n    //% block=\"sopran saxophone\"\r\n    //% block.loc.nl=\"sopraan saxofoon\"\r\n    SoprSax = 64,\r\n    //% block=\"alto saxophone\"\r\n    //% block.loc.nl=\"alt saxofoon\"\r\n    AltSax = 65,\r\n    //% block=\"tenor saxophone\"\r\n    //% block.loc.nl=\"tenor saxofoon\"\r\n    TenSax = 66,\r\n    //% block=\"piccoo\"\r\n    //% block.loc.nl=\"piccolo\"\r\n    Piccolo = 72,\r\n    //% block=\"flute\"\r\n    //% block.loc.nl=\"fluit\"\r\n    Flute = 73,\r\n    //% block=\"panflute\"\r\n    //% block.loc.nl=\"panfluit\"\r\n    PanFlute = 75,\r\n    //% block=\"wistle\"\r\n    //% block.loc.nl=\"mond fluiten\"\r\n    Whistle = 78,\r\n    //% block=\"bag pipe\"\r\n    //% block.loc.nl=\"doedelzak\"\r\n    Bagpipe = 109,\r\n    //% block=\"xylophone\"\r\n    //% block.loc.nl=\"xylofoon\"\r\n    Xylophone = 13,\r\n    //% block=\"tubular bells\"\r\n    //% block.loc.nl=\"buis-klokkenspel\"\r\n    TubBells = 14,\r\n    //% block=\"Chimes\"\r\n    //% block.loc.nl=\"Klokkenspel\"\r\n    Chimes = 9,\r\n    //% block=\"marimba\"\r\n    //% block.loc.nl=\"marimba\"\r\n    Marimba = 12,\r\n    //% block=\"steel drum\"\r\n    //% block.loc.nl=\"steeldrum\"\r\n    SteelDrum = 114,\r\n    //% block=\"drum\"\r\n    //% block.loc.nl=\"kleine trom\"\r\n    Drum = -38,\r\n    //% block=\"bass drum\"\r\n    //% block.loc.nl=\"grote trom\"\r\n    BassDrum = -36,\r\n    //% block=\"\"\r\n    //% block.loc.nl=\"\"\r\n    HiTom = -50,\r\n    //% block=\"\"\r\n    //% block.loc.nl=\"\"\r\n    LoTom = -45,\r\n    //% block=\"cymbal\"\r\n    //% block.loc.nl=\"bekken\"\r\n    Cymbal = -49,\r\n    //% block=\"tambourine\"\r\n    //% block.loc.nl=\"tamboerijn\"\r\n    Tambourine = -54,\r\n    //% block=\"cowbell\"\r\n    //% block.loc.nl=\"koebel\"\r\n    CowBell = -56,\r\n    //% block=\"hand clap\"\r\n    //% block.loc.nl=\"klap in de handen\"\r\n    HandClap = -39,\r\n    //% block=\"high bongo\"\r\n    //% block.loc.nl=\"hoge bongo\"\r\n    HiBongo = -60,\r\n    //% block=\"low bongo\"\r\n    //% block.loc.nl=\"lage bongo\"\r\n    LoBongo = -61,\r\n    //% block=\"triangle\"\r\n    //% block.loc.nl=\"triangel\"\r\n    Triangle = -81,\r\n}\r\n\r\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\r\n//% block=\"Midi tune\"\r\n//% block.loc.nl=\"Midi tune\"\r\nnamespace MidiController {\r\n\r\n    //% block=\"current measure\"\r\n    //% block.loc.nl=\"huidige maat\"\r\n    export function currentMeasure(): number {\r\n        return CURMEASURE\r\n    }\r\n\r\n    //% block=\"start\"\r\n    //% block.loc.nl=\"start\"\r\n    export function start() {\r\n        basic.showLeds(`\r\n                        . # # . .\r\n                        . # # # .\r\n                        . # # # #\r\n                        . # # # .\r\n                        . # # . .\r\n                        `)\r\n        tm_pause = 0\r\n        MIDINOTE = 0\r\n        MIDIPLAY = true\r\n        MIDIRESTART = true\r\n        CURMEASURE = -1\r\n    }\r\n\r\n    //% block=\"set pause %status\"\r\n    //% block.loc.nl=\"zet pauze %status\"\r\n    export function pause(status: boolean) {\r\n        if ((tm_pause != 0) != status) {\r\n            if (tm_pause) {\r\n                basic.showLeds(`\r\n                            . # # . .\r\n                            . # # # .\r\n                            . # # # #\r\n                            . # # # .\r\n                            . # # . .\r\n                            `)\r\n                tm_start += control.millis() - tm_pause\r\n                tm_pause = 0;\r\n                MIDIPLAY = true\r\n            }\r\n            else {\r\n                if (MIDIPLAY) {\r\n                    tm_pause = control.millis()\r\n                    MIDIPLAY = false\r\n                    basic.showLeds(`\r\n                                # # . # #\r\n                                # # . # #\r\n                                # # . # #\r\n                                # # . # #\r\n                                # # . # #\r\n                                `)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //% block=\"set repeat %status\"\r\n    //% block.loc.nl=\"zet repeat %status\"\r\n    export function repeat(status: boolean) {\r\n        MIDIREPEAT = status\r\n    }\r\n\r\n    //% block=\"stop the tune\"\r\n    //% block.loc.nl=\"stop de tune\"\r\n    export function stop() {\r\n        tm_pause = 0\r\n        MIDIPLAY = false\r\n        basic.showLeds(`\r\n                        . . . . .\r\n                        . # # # .\r\n                        . # # # .\r\n                        . # # # .\r\n                        . . . . .\r\n                        `)\r\n    }\r\n\r\n    //% block=\"choose %instrument or pariture %partiture\"\r\n    //% block.loc.nl=\"Kies %instrument voor partituur %partiture\"\r\n    //% partiture.min=1 partiture.max=5\r\n    export function setInstrument(instrument: Instrument, partiture: number) {\r\n        if (partiture < 1 || partiture > 5) return;\r\n        if (instrument < -127 || instrument > 127) return\r\n        partinstrument[partiture - 1] = instrument;\r\n    }\r\n\r\n    //% block=\"set volume of pariture %partiture to %volume %%\"\r\n    //% block.loc.nl=\"Stel het volume van partituur %partiture in op %volume %%\"\r\n    //% partiture.min=1 partiture.max=5\r\n    //% volume.min=0 volume.max=100\r\n    export function setVolume(partiture: number, volume: number) {\r\n        if (partiture < 1 || partiture > 5) return;\r\n        if (volume > 127) return\r\n        partvolume[partiture - 1] = volume;\r\n    }\r\n\r\n    //% block=\"change tempo to %perc %%\"\r\n    //% block.loc.nl=\"wijzig het tempo in %perc %%\"\r\n    //% perc.min=0 perc.max=100\r\n    export function tempo(perc: number) {\r\n        if (perc > 200) return\r\n        perc = 200 - perc\r\n        TEMPO = perc / 100\r\n    }\r\n\r\n    //% block=\"transpose the tune with %distance note distance\"\r\n    //% block.loc.nl=\"transponeer the tune met %distance\" noot-afstand\"\r\n    //% distance.min=-127 distance.max=127\r\n    export function transpose(distance: number) {\r\n        TONE = Math.floor(distance);\r\n    }\r\n} // end namespace\r\n\r\nMidiController.setInstrument(1, 0)\r\nMidiController.setInstrument(2, 0)\r\nMidiController.setInstrument(3, 0)\r\nMidiController.setInstrument(4, 0)\r\nMidiController.setInstrument(5, 0)\r\n\r\nMidiController.setVolume(1, 64)\r\nMidiController.setVolume(2, 64)\r\nMidiController.setVolume(3, 64)\r\nMidiController.setVolume(4, 64)\r\nMidiController.setVolume(5, 64)\r\n\r\ninput.onButtonPressed(Button.A, function () {\r\n    MidiController.start()\r\n})\r\n\r\ninput.onButtonPressed(Button.B, function () {\r\n    MidiController.stop()\r\n})\r\n\r\nradio.onReceivedNumber(function (cmd: number) {\r\n    // 0: stop playing\r\n    // 1: start playing\r\n    // 2: pause on\r\n    // 3: pause off\r\n    // 4: repeat on\r\n    // 5: repeat off\r\n\r\n    // 100-500: transposing = value - 300\r\n\r\n    // 1000-1199: instrument partiture 1\r\n    // 1200-1399: instrument partiture 2\r\n    // 1400-1599: instrument partiture 3\r\n    // 1600-1799: instrument partiture 4\r\n    // 1800-1999: instrument partiture 5\r\n\r\n    // 2000-2199: volume partiture 1\r\n    // 2200-2399: volume partiture 2\r\n    // 2400-2599: volume partiture 3\r\n    // 2600-2799: volume partiture 4\r\n    // 2800-2999: volume partiture 5\r\n\r\n    // > 3000: duration = value - 3000\r\n\r\n    if (!cmd) MidiController.stop()\r\n    else\r\n        if (cmd == 1) MidiController.start()\r\n        else\r\n            if (cmd == 2) MidiController.pause(true)\r\n            else\r\n                if (cmd == 2) MidiController.pause(false)\r\n                else\r\n                    if (cmd == 3) MidiController.repeat(true)\r\n                    else\r\n                        if (cmd == 4) MidiController.repeat(false)\r\n                        else\r\n\r\n                            if (cmd <= 500) MidiController.transpose(cmd - 300)\r\n                            else\r\n\r\n                                if (cmd < 1200) MidiController.setInstrument(1, cmd - 1000)\r\n                                else\r\n                                    if (cmd < 1400) MidiController.setInstrument(2, cmd - 1200)\r\n                                    else\r\n                                        if (cmd < 1600) MidiController.setInstrument(3, cmd - 1400)\r\n                                        else\r\n                                            if (cmd < 1800) MidiController.setInstrument(4, cmd - 1600)\r\n                                            else\r\n                                                if (cmd < 2000) MidiController.setInstrument(5, cmd - 1800)\r\n                                                else\r\n\r\n                                                    if (cmd < 2200) MidiController.setVolume(1, cmd - 2000)\r\n                                                    else\r\n                                                        if (cmd < 2400) MidiController.setVolume(2, cmd - 2200)\r\n                                                        else\r\n                                                            if (cmd < 2600) MidiController.setVolume(3, cmd - 2400)\r\n                                                            else\r\n                                                                if (cmd < 2800) MidiController.setVolume(4, cmd - 2600)\r\n                                                                else\r\n                                                                    if (cmd < 3000) MidiController.setVolume(5, cmd - 2800)\r\n                                                                    else\r\n                                                                        MidiController.tempo(cmd - 3000)\r\n})\r\n\r\n"]]}]}]},{"timestamp":1757954129999,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":4300,"diffs":[[1,""]]}]}]},{"timestamp":1757954131480,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"//////////////////////\r\n//##################//\r\n//##              ##//\r\n//##  general.ts  ##//\r\n//##              ##//\r\n//##################//\r\n//////////////////////\r\n\r\n/* This is a basic extension for robot matches.\r\n * The robot-players, goals and arbiter must include\r\n * it to be able to send and respond to 'Match'-messages.\r\n * \r\n * The radio event handler 'onReceivedNumber' stores\r\n * the messages in variable 'MATCH' and calls the\r\n * accompanying handler. Dependent extensions should\r\n * register the handlers, for example:\r\n *   //% block=\"when playing do\"\r\n *   export function onPlay(code: () => void) : void   {\r\n *       playHandler = code;\r\n *   }\r\n * Of course, a handler needs to be registered only\r\n * when applicable. An arbiter does not need to\r\n * register the playHandler.\r\n * \r\n * IMPORTANT NOTE:\r\n * Dependent extensions should have the following line\r\n * of code as the first line of EACH loop:\r\n *   if (!isPlaying()) return;\r\n * This ensures a quick response to the messages.\r\n */\r\n\r\nenum Role {\r\n    Arbiter,\r\n    PlayerGreen,\r\n    PlayerBlue,\r\n    GoalGreen,\r\n    GoalBlue\r\n}\r\n\r\nenum Match {\r\n    Reset,\r\n    Pause,\r\n    Play,\r\n    PointGreen,\r\n    PointBlue,\r\n    DisallowGreen,\r\n    DisallowBlue,\r\n    WinnerGreen,\r\n    WinnerBlue,\r\n    DisqualGreen,\r\n    DisqualBlue\r\n}\r\n\r\nlet MATCH: Match = Match.Reset\r\nlet OLDMATCH: Match = Match.Reset\r\nlet ROLE: Role = Role.Arbiter\r\n\r\nlet resetHandler: handler           // resetting the game\r\nlet playHandler: handler            // (re)starts playing\r\nlet pauseHandler: handler           // pauses playing\r\nlet pointGreenHandler: handler      // increase points for Green\r\nlet pointBlueHandler: handler       // increase points for blue\r\nlet disallowGreenHandler: handler   // decrease points for Green\r\nlet disallowBlueHandler: handler    // decrease points for blue\r\nlet winnerGreenHandler: handler     // end of game, Green has won\r\nlet winnerBlueHandler: handler      // end of game, blue has won\r\nlet loserGreenHandler: handler      // end of game, Green has lost\r\nlet loserBlueHandler: handler       // end of game, blue has lost\r\nlet disqualGreenHandler: handler    // end of game, Green was disqualified\r\nlet disqualBlueHandler: handler     // end of game, blue was disqualified\r\n\r\nfunction isPlaying(): boolean {\r\n    return (MATCH == Match.Play)\r\n}\r\n\r\nbasic.forever(function () {\r\n    if ((MATCH == Match.Play) && playHandler)\r\n        playHandler()\r\n})\r\n\r\nradio.onReceivedNumber(function (match: number) {\r\n    MATCH = match\r\n    switch (MATCH) {\r\n        case Match.Reset:\r\n            if (resetHandler) resetHandler()\r\n            break\r\n        // Match.Play should be handled by dependent extensions:\r\n        //       'if (!isPlaying()) return'\r\n        case Match.Pause:\r\n            if (pauseHandler) pauseHandler()\r\n            break\r\n        case Match.PointGreen:\r\n            if (pointGreenHandler) pointGreenHandler()\r\n            if (pauseHandler) pauseHandler()\r\n            break\r\n        case Match.PointBlue:\r\n            if (pointBlueHandler) pointBlueHandler()\r\n            if (pauseHandler) pauseHandler()\r\n            break\r\n        case Match.DisallowGreen:\r\n            if (disallowGreenHandler) disallowGreenHandler()\r\n            MATCH = OLDMATCH\r\n            break\r\n        case Match.DisallowBlue:\r\n            if (disallowBlueHandler) disallowBlueHandler()\r\n            MATCH = OLDMATCH\r\n            break\r\n        case Match.WinnerGreen:\r\n            if (winnerGreenHandler) winnerGreenHandler()\r\n            if (loserBlueHandler) loserBlueHandler()\r\n            if (pauseHandler) pauseHandler()\r\n            break\r\n        case Match.WinnerBlue:\r\n            if (winnerBlueHandler) winnerBlueHandler()\r\n            if (loserGreenHandler) loserGreenHandler()\r\n            if (pauseHandler) pauseHandler()\r\n            break\r\n        case Match.DisqualGreen:\r\n            if (disqualGreenHandler) disqualGreenHandler()\r\n            if (winnerBlueHandler) winnerBlueHandler()\r\n            if (pauseHandler) pauseHandler()\r\n            break\r\n        case Match.DisqualBlue:\r\n            if (disqualBlueHandler) disqualBlueHandler()\r\n            if (winnerGreenHandler) winnerGreenHandler()\r\n            if (pauseHandler) pauseHandler()\r\n            break\r\n    }\r\n    OLDMATCH = MATCH\r\n})\r\n"]]}]}]},{"timestamp":1757954437539,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":2939,"diffs":[[1,""]]}]}]},{"timestamp":1757955176040,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":3438,"diffs":[[1,""]]}]}]},{"timestamp":1757955196297,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"//////////////////////\r\n//##################//\r\n//##              ##//\r\n//##  general.ts  ##//\r\n//##              ##//\r\n//##################//\r\n//////////////////////\r\n\r\nlet GROUP = 1\r\nlet WAVE = false\r\nlet WAVEWAIT = 1000\r\n\r\ntype handler = () => void\r\n\r\ntype msghandler = (value: number) => void\r\nlet messageHandler: msghandler\r\nfunction onMessage(code: msghandler) {\r\n    messageHandler = code;\r\n}\r\n\r\nradio.onReceivedNumber(function (value: number) {\r\n    if (WAVE) basic.pause(WAVEWAIT)\r\n    if (messageHandler) messageHandler(value)\r\n})\r\n\r\nlet displayHandler: handler\r\nfunction onDisplay(code: handler) {\r\n    displayHandler = code;\r\n}\r\n\r\nfunction display() {\r\n    basic.showNumber(GROUP)\r\n    basic.pause(500)\r\n    if (displayHandler) displayHandler()\r\n    else basic.showIcon(IconNames.Yes)\r\n}\r\n\r\ndisplay()\r\n\r\nconst EVENTID = 200 + Math.randomRange(0, 100); // semi-unique\r\nlet EVENTCNT = 0\r\n\r\ncontrol.onEvent(EVENTID, 0, function () {\r\n    control.inBackground(() => {\r\n        EVENTCNT++\r\n        basic.showNumber(GROUP)\r\n        let tm = control.millis() + 1000\r\n        while (tm > control.millis()) basic.pause(1)\r\n        EVENTCNT--\r\n        if (!EVENTCNT) display()\r\n    })\r\n})\r\n\r\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\r\n    GROUP++\r\n    if (GROUP > 9) GROUP = 1\r\n    radio.setGroup(GROUP)\r\n    control.raiseEvent(EVENTID, 0)\r\n})\r\n\r\nenum Digital {\r\n    //% block=\"low\"\r\n    //% block.loc.nl=\"laag\"\r\n    Low,\r\n    //% block=\"high\"\r\n    //% block.loc.nl=\"hoog\"\r\n    High,\r\n}\r\n\r\nenum Move {\r\n    //% block=\"forward\"\r\n    //% block.loc.nl=\"vooruit\"\r\n    Forward,\r\n    //% block=\"backward\"\r\n    //% block.loc.nl=\"achteruit\"\r\n    Backward,\r\n}\r\n\r\nenum Rotate {\r\n    //% block=\"clockwise\"\r\n    //% block.loc.nl=\"rechtsom\"\r\n    Clockwise,\r\n    //% block=\"anticlockwise\"\r\n    //% block.loc.nl=\"linksom\"\r\n    AntiClockwise,\r\n}\r\n\r\nenum Pace {\r\n    //% block=\"fast\"\r\n    //% block.loc.nl=\"snelle\"\r\n    Fast,\r\n    //% block=\"normal\"\r\n    //% block.loc.nl=\"normale\"\r\n    Normal,\r\n    //% block=\"slow\"\r\n    //% block.loc.nl=\"langzame\"\r\n    Slow,\r\n}\r\n\r\nenum State {\r\n    //% block=\"off\"\r\n    //% block.loc.nl=\"uit\"\r\n    Off,\r\n    //% block=\"on\"\r\n    //% block.loc.nl=\"aan\"\r\n    On,\r\n}\r\n\r\n//% color=\"#61CBF4\" icon=\"\\uf075\"\r\n//% block=\"General\"\r\n//% block.loc.nl=\"Algemeen\"\r\nnamespace General {\r\n\r\n    //% color=\"#008800\"\r\n    //% block=\"comment: %dummy\"\r\n    //% block.loc.nl=\"uitleg: %dummy\"\r\n    //% dummy.defl=\"schrijf hier je uitleg\"\r\n    export function comment(dummy: string) {\r\n    }\r\n\r\n    //% block=\"turn %state the wave\"\r\n    //% block.loc.nl=\"zet de wave %state\"\r\n    export function waveOn(state: State) {\r\n        WAVE = (state == State.On);\r\n    }\r\n\r\n    //% block=\"wave after %sec seconds\"\r\n    //% block.loc.nl=\"wave na %sec seconden\"\r\n    export function setWave(delay: number) {\r\n        WAVEWAIT = delay * 1000\r\n    }\r\n\r\n    //% block=\"a number from %min upto %max\"\r\n    //% block.loc.nl=\"een getal van %min t/m %max\"\r\n    //% min.defl=0 max.defl=10\r\n    export function randomInt(min: number, max: number): number {\r\n        let i = 0\r\n        if (min > max) {\r\n            i = min\r\n            min = max\r\n            max = i\r\n        }\r\n        i = max - min + 1\r\n        i = min + Math.floor(Math.random() * i)\r\n        return i\r\n    }\r\n\r\n    //% block=\"wait %sec seconds\"\r\n    //% block.loc.nl=\"wacht %sec seconden\"\r\n    export function wait(sec: number) {\r\n        basic.pause(sec * 1000)\r\n    }\r\n}\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//##  elwire.ts  ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\nonDisplay(() => {\r\n    basic.showIcon(IconNames.Happy)\r\n})\r\n\r\nenum Wire {\r\n    //% block=\"el-wire 1\"\r\n    //% block.loc.nl=\"el-wire 1\"\r\n    Wire1,\r\n    //% block=\"el-wire 2\"\r\n    //% block.loc.nl=\"el-wire 2\"\r\n    Wire2\r\n}\r\n\r\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\r\n//% block=\"Electric Wire\"\r\nnamespace ELWire {\r\n\r\n    export let REMOTE = false\r\n\r\n    export enum Operation {\r\n        //% block=\"ELWire 1 on\"\r\n        //% block.loc.nl=\"el-wire 1 aan\"\r\n        Wire1on,\r\n        //% block=\"ELWire 1 off\"\r\n        //% block.loc.nl=\"el-wire 1 uit\"\r\n        Wire1off,\r\n        //% block=\"ELWire 2 on\"\r\n        //% block.loc.nl=\"el-wire 2 aan\"\r\n        Wire2on,\r\n        //% block=\"ELWire 2 off\"\r\n        //% block.loc.nl=\"el-wire 2 uit\"\r\n        Wire2off,\r\n    }\r\n\r\n    //% block=\"turn remote control on\"\r\n    //% block.loc.nl=\"zet afstandbediening aan\"\r\n    export function setRemote() {\r\n        REMOTE = true\r\n    }\r\n\r\n    //% block=\"turn %elwire off\"\r\n    //% block.loc.nl=\"doe %elwire uit\"\r\n    export function wireOff(elwire: Wire) {\r\n        if (REMOTE)\r\n            radio.sendNumber(elwire == Wire.Wire1 ? Operation.Wire1off : Operation.Wire2off)\r\n        else {\r\n            let pin = (elwire == Wire.Wire1 ? DigitalPin.P1 : DigitalPin.P2);\r\n            pins.digitalWritePin(pin, 0);\r\n        }\r\n    }\r\n\r\n    //% block=\"turn %elwire on\"\r\n    //% block.loc.nl=\"doe %elwire aan\"\r\n    export function wireOn(elwire: Wire) {\r\n        if (REMOTE)\r\n            radio.sendNumber(elwire == Wire.Wire1 ? Operation.Wire1on : Operation.Wire2on)\r\n        else {\r\n            let pin = (elwire == Wire.Wire1 ? DigitalPin.P1 : DigitalPin.P2);\r\n            pins.digitalWritePin(pin, 1);\r\n        }\r\n    }\r\n\r\n    //% block=\"turn %elwire on for %time sec\"\r\n    //% block.loc.nl=\"doe %elwire %time sec aan\"\r\n    export function wireOnOff(elwire: Wire, time: number) {\r\n        if (REMOTE) {\r\n            radio.sendNumber(elwire == Wire.Wire1 ? Operation.Wire1on : Operation.Wire2on)\r\n            basic.pause(time * 1000);\r\n            radio.sendNumber(elwire == Wire.Wire1 ? Operation.Wire1off : Operation.Wire2off)\r\n        }\r\n        else {\r\n            let pin1 = (elwire == Wire.Wire1 ? DigitalPin.P1 : DigitalPin.P2);\r\n            pins.digitalWritePin(pin1, 1);\r\n            basic.pause(time * 1000);\r\n            pins.digitalWritePin(pin1, 0);\r\n        }\r\n    }\r\n\r\n    radio.onReceivedNumber(function (receivedNumber: number) {\r\n        if (REMOTE) return // do not echo\r\n        switch (receivedNumber) {\r\n            case Operation.Wire1on: wireOn(Wire.Wire1); break;\r\n            case Operation.Wire1off: wireOff(Wire.Wire1); break;\r\n            case Operation.Wire2on: wireOn(Wire.Wire2); break;\r\n            case Operation.Wire2off: wireOff(Wire.Wire2); break;\r\n        }\r\n    })\r\n}\r\n"]]}]}]},{"timestamp":1757955534987,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":134,"diffs":[[1,""]]}]}]},{"timestamp":1757957140499,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":119,"length1":13,"diffs":[[1,"basic.forever(f"]]}]}]},{"timestamp":1757957141890,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":84,"diffs":[[1,"function onPause(code: handler): void {\r\n    pauseHandler = code\r\n"]]},{"start1":69,"length1":0,"diffs":[[1,"onPause(() => {\r\n    CSoccerPlayer.stop();\r\n})\r\n"]]},{"start1":119,"length1":16,"diffs":[[1,"basic.forever"]]}]}]},{"timestamp":1757957228423,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"type handler = () => void\r\n\r\nlet pauseHandler: handler\r\n\r\npauseHandler = () => {\r\n\r\n}\r\n\r\npauseHandler()\r\n"]]}]}]},{"timestamp":1757958949724,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":7772,"diffs":[[1,""]]}]}]},{"timestamp":1757965399236,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2941,"length1":4,"diffs":[[1,"}\r\n"]]}]}]},{"timestamp":1757965441286,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":3638,"diffs":[[1,""]]},{"start1":66,"length1":9010,"diffs":[[1,""]]},{"start1":1988,"length1":36,"diffs":[[1,"    showPlayerHandler = code;\r\n"]]},{"start1":2077,"length1":39,"diffs":[[1,"    if (ColorSensor.read() == Color.Blue)\r\n"]]},{"start1":2267,"length1":0,"diffs":[[1,"    Nezha.setTwoWheelSpeed(0, 0)\r\n"]]},{"start1":2411,"length1":58,"diffs":[[1,"    if (showPlayerColor) showPlayerColor()\r\n"]]},{"start1":2589,"length1":58,"diffs":[[1,"    if (showPlayerColor) showPlayerColor()\r\n"]]},{"start1":3698,"length1":45,"diffs":[[1,"            if (ROLE == Role.Green) {\r\n"]]},{"start1":3902,"length1":44,"diffs":[[1,"            if (ROLE == Role.Blue) {\r\n"]]},{"start1":5507,"length1":45,"diffs":[[1,"            if (ROLE == Role.Green) {\r\n"]]},{"start1":5664,"length1":44,"diffs":[[1,"            if (ROLE == Role.Blue) {\r\n"]]},{"start1":5994,"length1":45,"diffs":[[1,"            if (ROLE == Role.Green) {\r\n"]]},{"start1":6151,"length1":44,"diffs":[[1,"            if (ROLE == Role.Blue) {\r\n"]]},{"start1":7151,"length1":26,"diffs":[[1,"    if (ROLE == Role.PlayerGreen)\r\n        winnerGreenHandler = code\r\n"]]}]}]},{"timestamp":1757966040759,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":14357,"length1":0,"diffs":[[1,"let disallowHandler: handler   // decrease points for Green\r\n"]]},{"start1":14481,"length1":0,"diffs":[[1,"let disqualHandler: handler    // end of game, Green was disqualified\r\n"]]},{"start1":17605,"length1":0,"diffs":[[1,"                if (disallowHandler) disallowHandler()\r\n"]]},{"start1":17907,"length1":0,"diffs":[[1,"                if (disallowHandler) disallowHandler()\r\n"]]},{"start1":19316,"length1":28,"diffs":[[1,"    ROLE = role\r\n}\r\n"]]},{"start1":19471,"length1":38,"diffs":[[1,"    return (ROLE == role)\r\n}\r\n"]]},{"start1":19503,"length1":178,"diffs":[[1,"//% block=\"the game is in progress\"\r\n//% block.loc.nl=\"het spel bezig is\"\r\nexport function isPlaying(): boolean {\r\n    return (MATCH == MatchStatus.Play)\r\n}\r\n"]]},{"start1":19663,"length1":220,"diffs":[[1,"//% color=\"#FFCC00\"\r\n//% block=\"code for the winner to celebrat\"\r\n//% block.loc.nl=\"code om het winnen te vieren\"\r\nexport function onWinner(code: () => void): void {\r\n    winnerHandler = code\r\n    if (ROLE == Role.PlayerBlue)\r\n        winnerBlueHandler = code\r\n}\r\n"]]},{"start1":19929,"length1":216,"diffs":[[1,"//% color=\"#FFCC00\"\r\n//% block=\"code for celebrating a goal\"\r\n//% block.loc.nl=\"code om een doelpunt te vieren\"\r\nexport function onPoint(code: () => void): void {\r\n    if (ROLE == Role.PlayerGreen)\r\n        pointGreenHandler = code\r\n    if (ROLE == Role.PlayerBlue)\r\n        pointBlueHandler = code\r\n}\r\n"]]},{"start1":20234,"length1":195,"diffs":[[1,"//% color=\"#FFCC00\"\r\n//% block=\"code for playing\"\r\n//% block.loc.nl=\"code om te voetballen\"\r\nexport function onPlay(code: () => void): void {\r\n    playHandler = code;\r\n}\r\n\r\n"]]}]}]},{"timestamp":1757966335930,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":25,"diffs":[[1,"    \"name\": \"test\",\n"]]}]}]},{"timestamp":1757968090714,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":29,"diffs":[[1,"    \"name\": \"pxt-match\",\n"]]}]}]},{"timestamp":1757968135195,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":339,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1757933776165,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1757939078379,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"////////////////////\n//################//\n//##            ##//\n//##  dht22.ts  ##//\n//##            ##//\n//################//\n////////////////////\n\n/*\nThe DHT code is a refactory of an older version of the tinkertanker library:\nhttps://github.com/tinkertanker/pxt-iot-environment-kit/releases/tag/v5.2.7\n(MIT-license)\nNote that the latest release does not work\n*/\n\ntype TemperatureHumidity = [number, number]\n\nconst Temperature = 0\nconst Humidity = 1\n\nnamespace DHT22 {\n\n    export class Device {\n\n        pin: DigitalPin\n\n        constructor(pin: DigitalPin) {\n            this.pin = pin\n        }\n\n        read(): TemperatureHumidity {\n            const timeout = 100\n            const buffer = pins.createBuffer(40)\n            const data = [0, 0, 0, 0, 0]\n            let temp = 0\n            let hum = 0\n            let startTime = control.micros()\n\n            // 1.start signal\n            pins.digitalWritePin(this.pin, 0)\n            basic.pause(18)\n\n            // 2.pull up and wait 40us\n            pins.setPull(this.pin, PinPullMode.PullUp)\n            pins.digitalReadPin(this.pin)\n            control.waitMicros(40)\n\n            // 3.read data\n            startTime = control.micros()\n            while (pins.digitalReadPin(this.pin) === 0) {\n                if (control.micros() - startTime > timeout) break\n            }\n            startTime = control.micros()\n            while (pins.digitalReadPin(this.pin) === 1) {\n                if (control.micros() - startTime > timeout) break\n            }\n\n            for (let dataBits = 0; dataBits < 40; dataBits++) {\n                startTime = control.micros()\n                while (pins.digitalReadPin(this.pin) === 1) {\n                    if (control.micros() - startTime > timeout) break\n                }\n                startTime = control.micros()\n                while (pins.digitalReadPin(this.pin) === 0) {\n                    if (control.micros() - startTime > timeout) break\n                }\n                control.waitMicros(28)\n                if (pins.digitalReadPin(this.pin) === 1) {\n                    buffer[dataBits] = 1\n                }\n            }\n\n            for (let i = 0; i < 5; i++) {\n                for (let j = 0; j < 8; j++) {\n                    if (buffer[8 * i + j] === 1) {\n                        data[i] += 2 ** (7 - j)\n                    }\n                }\n            }\n\n            if (((data[0] + data[1] + data[2] + data[3]) & 0xff) === data[4]) {\n                hum = (data[0] << 8) | data[1]\n                hum *= 0.1\n                temp = data[2] + data[3] * 0.1\n            }\n            let dht22: TemperatureHumidity = [temp, hum]\n            return dht22\n        }\n    }\n\n    export function create(pin: DigitalPin): Device {\n        let device = new Device(pin)\n        return device\n    }\n}\n\n\nlet dht = DHT22.create(DigitalPin.P0)\nbasic.forever(function () {\n    let th = dht.read()\n    basic.showString(\"T\")\n    basic.showNumber(th[Temperature])\n    basic.showString(\"H\")\n    basic.showNumber(th[Humidity])\n    basic.pause(3000)\n})\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757951238910,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"////////////////////\n//################//\n//##            ##//\n//##  dht22.ts  ##//\n//##            ##//\n//################//\n////////////////////\n\n/*\nThe DHT code is a refactory of an older version of the tinkertanker library:\nhttps://github.com/tinkertanker/pxt-iot-environment-kit/releases/tag/v5.2.7\n(MIT-license)\nNote that the latest release does not work\n*/\n\ntype TemperatureHumidity = [number, number]\n\nconst Temperature = 0\nconst Humidity = 1\n\nnamespace DHT22 {\n\n    export class Device {\n\n        pin: DigitalPin\n\n        constructor(pin: DigitalPin) {\n            this.pin = pin\n        }\n\n        read(): TemperatureHumidity {\n            const timeout = 100\n            const buffer = pins.createBuffer(40)\n            const data = [0, 0, 0, 0, 0]\n            let temp = 0\n            let hum = 0\n            let startTime = control.micros()\n\n            // 1.start signal\n            pins.digitalWritePin(this.pin, 0)\n            basic.pause(18)\n\n            // 2.pull up and wait 40us\n            pins.setPull(this.pin, PinPullMode.PullUp)\n            pins.digitalReadPin(this.pin)\n            control.waitMicros(40)\n\n            // 3.read data\n            startTime = control.micros()\n            while (pins.digitalReadPin(this.pin) === 0) {\n                if (control.micros() - startTime > timeout) break\n            }\n            startTime = control.micros()\n            while (pins.digitalReadPin(this.pin) === 1) {\n                if (control.micros() - startTime > timeout) break\n            }\n\n            for (let dataBits = 0; dataBits < 40; dataBits++) {\n                startTime = control.micros()\n                while (pins.digitalReadPin(this.pin) === 1) {\n                    if (control.micros() - startTime > timeout) break\n                }\n                startTime = control.micros()\n                while (pins.digitalReadPin(this.pin) === 0) {\n                    if (control.micros() - startTime > timeout) break\n                }\n                control.waitMicros(28)\n                if (pins.digitalReadPin(this.pin) === 1) {\n                    buffer[dataBits] = 1\n                }\n            }\n\n            for (let i = 0; i < 5; i++) {\n                for (let j = 0; j < 8; j++) {\n                    if (buffer[8 * i + j] === 1) {\n                        data[i] += 2 ** (7 - j)\n                    }\n                }\n            }\n\n            if (((data[0] + data[1] + data[2] + data[3]) & 0xff) === data[4]) {\n                hum = (data[0] << 8) | data[1]\n                hum *= 0.1\n                temp = data[2] + data[3] * 0.1\n            }\n            let dht22: TemperatureHumidity = [temp, hum]\n            return dht22\n        }\n    }\n\n    export function create(pin: DigitalPin): Device {\n        let device = new Device(pin)\n        return device\n    }\n}\n\n\nlet dht = DHT22.create(DigitalPin.P0)\nbasic.forever(function () {\n    let th = dht.read()\n    basic.showString(\"T\")\n    basic.showNumber(th[Temperature])\n    basic.showString(\"H\")\n    basic.showNumber(th[Humidity])\n    basic.pause(3000)\n})\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"sdcard\": \"github:tinkertanker/pxt-microsd-microbit#2961d0d6b9b4cd93177c3ce3975af70f0a6c914e\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757954129999,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"serial.redirect(SerialPin.P14, SerialPin.P13, 31250)\r\n\r\nlet TEMPO = 1.0     // normal tempo * 1\r\nlet TONE = 0        // midi notes up(+) or down(-)\r\n\r\nlet TUNENOTES: number[][]\r\nlet MEASURE: number\r\nlet CURMEASURE = 0\r\n\r\nconst TUNE_PART = 0\r\nconst TUNE_START = 1\r\nconst TUNE_DURA = 2\r\nconst NOTE_OFF = 0\r\nconst CHORD_ROOT = 3\r\nconst CHORD_MAX = 9\r\nconst PART_MAX = 5\r\nconst NOTE_PAUSE = 127\r\n\r\nlet MIDIRESTART = true\r\nlet MIDIREPEAT = false\r\nlet MIDIPLAY = false\r\nlet MIDINOTE = 0\r\n\r\nlet midinotes =\r\n    [\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 1\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 2\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 3\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 4\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0], // [0] time noteOff + [3..8] chord notes partiture 5\r\n    ]\r\n\r\nlet partinstrument = [0, 0, 0, 0, 0]\r\nlet partvolume = [0, 0, 0, 0, 0]\r\n\r\nfunction noteOn(note: number, volume: number) {\r\n    let buffer = pins.createBuffer(3)\r\n    buffer.setUint8(0, 0x90)\r\n    buffer.setUint8(1, note)\r\n    buffer.setUint8(2, volume)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nfunction noteOff(note: number) {\r\n    let buffer = pins.createBuffer(3)\r\n    buffer.setUint8(0, 0x80)\r\n    buffer.setUint8(1, note)\r\n    buffer.setUint8(2, 0)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nfunction percussionOn(instrument: number, volume: number) {\r\n    let buffer = pins.createBuffer(3)\r\n    buffer.setUint8(0, 0x99)\r\n    buffer.setUint8(1, instrument)\r\n    buffer.setUint8(2, volume)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nfunction persussionOff(instrument: number) {\r\n    let buffer = pins.createBuffer(3)\r\n    buffer.setUint8(0, 0x89)\r\n    buffer.setUint8(1, instrument)\r\n    buffer.setUint8(2, 0)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nfunction instrument(instr: number) {\r\n    let buffer = pins.createBuffer(2)\r\n    buffer.setUint8(0, 0xC0)\r\n    buffer.setUint8(1, instr)\r\n    serial.writeBuffer(buffer)\r\n}\r\n\r\nlet part = -1\r\nlet tone = 0\r\nlet tm_start = control.millis()\r\nlet tm_pause = control.millis()\r\nlet tm = control.millis()\r\n\r\nbasic.forever(function () {\r\n\r\n    if (!MIDIPLAY) return\r\n\r\n    if (MIDIRESTART) {\r\n        MIDIRESTART = false\r\n        part = -1\r\n        tone = 0\r\n        tm_pause = 0\r\n        tm_start = control.millis()\r\n    }\r\n\r\n    tm = control.millis();\r\n\r\n    if (tm >= tm_start + TEMPO * TUNENOTES[MIDINOTE][TUNE_START]) {\r\n        tone = TONE;\r\n        part = TUNENOTES[MIDINOTE][TUNE_PART] - 1;\r\n        for (let i = CHORD_ROOT; i < CHORD_MAX; i++) {\r\n            if (midinotes[part][i] >= 0 && midinotes[part][i] < NOTE_PAUSE)\r\n                noteOff(midinotes[part][i]);\r\n            midinotes[part][i] = TUNENOTES[MIDINOTE][i];\r\n        }\r\n        midinotes[part][NOTE_OFF] = tm_start +\r\n            TEMPO * (TUNENOTES[MIDINOTE][TUNE_START] + TUNENOTES[MIDINOTE][TUNE_DURA]);\r\n        for (let i = CHORD_ROOT; i < CHORD_MAX; i++)\r\n            if (midinotes[part][i] >= 0 && midinotes[part][i] < NOTE_PAUSE) {\r\n                midinotes[part][i] = midinotes[part][i] + TONE;\r\n                if (partinstrument[part] < 0)\r\n                    percussionOn(-partinstrument[part], partvolume[part]);\r\n                else\r\n                    instrument(partinstrument[part]);\r\n                noteOn(midinotes[part][i], partvolume[part]);\r\n            }\r\n        MIDINOTE += 1;\r\n\r\n        if (TUNENOTES[MIDINOTE][TUNE_PART] < 0) {\r\n            // let MIDINOTE notes finish\r\n            let cnt = 0;\r\n            while (MIDIPLAY && (cnt < 5)) {\r\n                cnt = 0;\r\n                for (part = 0; part < PART_MAX; part++) {\r\n                    if (midinotes[part][NOTE_OFF]) {\r\n                        if (midinotes[part][NOTE_OFF] < control.millis()) {\r\n                            for (let i = CHORD_ROOT; i < CHORD_MAX; i++)\r\n                                noteOff(midinotes[part][i]);\r\n                            midinotes[part][NOTE_OFF] = 0;\r\n                            cnt += 1;\r\n                        }\r\n                    }\r\n                    else\r\n                        cnt += 1;\r\n                }\r\n            }\r\n\r\n            MIDIRESTART = true;\r\n            MIDINOTE = 0\r\n            if (MIDIREPEAT) {\r\n                MidiController.stop()\r\n                basic.pause(500)\r\n                MidiController.start()\r\n            }\r\n            else\r\n                MidiController.stop()\r\n        }\r\n    }\r\n\r\n    let cur = Math.floor((tm - tm_start) / MEASURE) + 1\r\n    if (CURMEASURE != cur) {\r\n        CURMEASURE = cur\r\n        radio.sendNumber(-CURMEASURE)\r\n    }\r\n})\r\n\r\nenum Instrument {\r\n    //% block=\"piano\"\r\n    //% block.loc.nl=\"piano\"\r\n    Piano = 0,\r\n    //% block=\"synthesizer\"\r\n    //% block.loc.nl=\"synthesizer\"\r\n    Synthesizer = 50,\r\n    //% block=\"organ\"\r\n    //% block.loc.nl=\"orgel\"\r\n    Organ = 19,\r\n    //% block=\"guitar\"\r\n    //% block.loc.nl=\"gitaar\"\r\n    Guitar = 25,\r\n    //% block=\"electric guitar\"\r\n    //% block.loc.nl=\"electrische gitaar\"\r\n    ElGuitar = 26,\r\n    //% block=\"banjo\"\r\n    //% block.loc.nl=\"banjo\"\r\n    Banjo = 105,\r\n    //% block=\"harp\"\r\n    //% block.loc.nl=\"harp\"\r\n    Harp = 46,\r\n    //% block=\"violin\"\r\n    //% block.loc.nl=\"viool\"\r\n    Violin = 40,\r\n    //% block=\"cello\"\r\n    //% block.loc.nl=\"cello\"\r\n    Cello = 42,\r\n    //% block=\"oboe\"\r\n    //% block.loc.nl=\"hobo\"\r\n    Oboe = 68,\r\n    //% block=\"clarinet\"\r\n    //% block.loc.nl=\"klarinet\"\r\n    Clarinet = 71,\r\n    //% block=\"trumpet\"\r\n    //% block.loc.nl=\"trompet\"\r\n    Trumpet = 56,\r\n    //% block=\"trombone\"\r\n    //% block.loc.nl=\"trombone\"\r\n    Trombone = 57,\r\n    //% block=\"horn\"\r\n    //% block.loc.nl=\"hoorn\"\r\n    Horn = 60,\r\n    //% block=\"sopran saxophone\"\r\n    //% block.loc.nl=\"sopraan saxofoon\"\r\n    SoprSax = 64,\r\n    //% block=\"alto saxophone\"\r\n    //% block.loc.nl=\"alt saxofoon\"\r\n    AltSax = 65,\r\n    //% block=\"tenor saxophone\"\r\n    //% block.loc.nl=\"tenor saxofoon\"\r\n    TenSax = 66,\r\n    //% block=\"piccoo\"\r\n    //% block.loc.nl=\"piccolo\"\r\n    Piccolo = 72,\r\n    //% block=\"flute\"\r\n    //% block.loc.nl=\"fluit\"\r\n    Flute = 73,\r\n    //% block=\"panflute\"\r\n    //% block.loc.nl=\"panfluit\"\r\n    PanFlute = 75,\r\n    //% block=\"wistle\"\r\n    //% block.loc.nl=\"mond fluiten\"\r\n    Whistle = 78,\r\n    //% block=\"bag pipe\"\r\n    //% block.loc.nl=\"doedelzak\"\r\n    Bagpipe = 109,\r\n    //% block=\"xylophone\"\r\n    //% block.loc.nl=\"xylofoon\"\r\n    Xylophone = 13,\r\n    //% block=\"tubular bells\"\r\n    //% block.loc.nl=\"buis-klokkenspel\"\r\n    TubBells = 14,\r\n    //% block=\"Chimes\"\r\n    //% block.loc.nl=\"Klokkenspel\"\r\n    Chimes = 9,\r\n    //% block=\"marimba\"\r\n    //% block.loc.nl=\"marimba\"\r\n    Marimba = 12,\r\n    //% block=\"steel drum\"\r\n    //% block.loc.nl=\"steeldrum\"\r\n    SteelDrum = 114,\r\n    //% block=\"drum\"\r\n    //% block.loc.nl=\"kleine trom\"\r\n    Drum = -38,\r\n    //% block=\"bass drum\"\r\n    //% block.loc.nl=\"grote trom\"\r\n    BassDrum = -36,\r\n    //% block=\"\"\r\n    //% block.loc.nl=\"\"\r\n    HiTom = -50,\r\n    //% block=\"\"\r\n    //% block.loc.nl=\"\"\r\n    LoTom = -45,\r\n    //% block=\"cymbal\"\r\n    //% block.loc.nl=\"bekken\"\r\n    Cymbal = -49,\r\n    //% block=\"tambourine\"\r\n    //% block.loc.nl=\"tamboerijn\"\r\n    Tambourine = -54,\r\n    //% block=\"cowbell\"\r\n    //% block.loc.nl=\"koebel\"\r\n    CowBell = -56,\r\n    //% block=\"hand clap\"\r\n    //% block.loc.nl=\"klap in de handen\"\r\n    HandClap = -39,\r\n    //% block=\"high bongo\"\r\n    //% block.loc.nl=\"hoge bongo\"\r\n    HiBongo = -60,\r\n    //% block=\"low bongo\"\r\n    //% block.loc.nl=\"lage bongo\"\r\n    LoBongo = -61,\r\n    //% block=\"triangle\"\r\n    //% block.loc.nl=\"triangel\"\r\n    Triangle = -81,\r\n}\r\n\r\n//% color=\"#00CC00\" icon=\"\\uf1f9\"\r\n//% block=\"Midi tune\"\r\n//% block.loc.nl=\"Midi tune\"\r\nnamespace MidiController {\r\n\r\n    //% block=\"current measure\"\r\n    //% block.loc.nl=\"huidige maat\"\r\n    export function currentMeasure(): number {\r\n        return CURMEASURE\r\n    }\r\n\r\n    //% block=\"start\"\r\n    //% block.loc.nl=\"start\"\r\n    export function start() {\r\n        basic.showLeds(`\r\n                        . # # . .\r\n                        . # # # .\r\n                        . # # # #\r\n                        . # # # .\r\n                        . # # . .\r\n                        `)\r\n        tm_pause = 0\r\n        MIDINOTE = 0\r\n        MIDIPLAY = true\r\n        MIDIRESTART = true\r\n        CURMEASURE = -1\r\n    }\r\n\r\n    //% block=\"set pause %status\"\r\n    //% block.loc.nl=\"zet pauze %status\"\r\n    export function pause(status: boolean) {\r\n        if ((tm_pause != 0) != status) {\r\n            if (tm_pause) {\r\n                basic.showLeds(`\r\n                            . # # . .\r\n                            . # # # .\r\n                            . # # # #\r\n                            . # # # .\r\n                            . # # . .\r\n                            `)\r\n                tm_start += control.millis() - tm_pause\r\n                tm_pause = 0;\r\n                MIDIPLAY = true\r\n            }\r\n            else {\r\n                if (MIDIPLAY) {\r\n                    tm_pause = control.millis()\r\n                    MIDIPLAY = false\r\n                    basic.showLeds(`\r\n                                # # . # #\r\n                                # # . # #\r\n                                # # . # #\r\n                                # # . # #\r\n                                # # . # #\r\n                                `)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //% block=\"set repeat %status\"\r\n    //% block.loc.nl=\"zet repeat %status\"\r\n    export function repeat(status: boolean) {\r\n        MIDIREPEAT = status\r\n    }\r\n\r\n    //% block=\"stop the tune\"\r\n    //% block.loc.nl=\"stop de tune\"\r\n    export function stop() {\r\n        tm_pause = 0\r\n        MIDIPLAY = false\r\n        basic.showLeds(`\r\n                        . . . . .\r\n                        . # # # .\r\n                        . # # # .\r\n                        . # # # .\r\n                        . . . . .\r\n                        `)\r\n    }\r\n\r\n    //% block=\"choose %instrument or pariture %partiture\"\r\n    //% block.loc.nl=\"Kies %instrument voor partituur %partiture\"\r\n    //% partiture.min=1 partiture.max=5\r\n    export function setInstrument(instrument: Instrument, partiture: number) {\r\n        if (partiture < 1 || partiture > 5) return;\r\n        if (instrument < -127 || instrument > 127) return\r\n        partinstrument[partiture - 1] = instrument;\r\n    }\r\n\r\n    //% block=\"set volume of pariture %partiture to %volume %%\"\r\n    //% block.loc.nl=\"Stel het volume van partituur %partiture in op %volume %%\"\r\n    //% partiture.min=1 partiture.max=5\r\n    //% volume.min=0 volume.max=100\r\n    export function setVolume(partiture: number, volume: number) {\r\n        if (partiture < 1 || partiture > 5) return;\r\n        if (volume > 127) return\r\n        partvolume[partiture - 1] = volume;\r\n    }\r\n\r\n    //% block=\"change tempo to %perc %%\"\r\n    //% block.loc.nl=\"wijzig het tempo in %perc %%\"\r\n    //% perc.min=0 perc.max=100\r\n    export function tempo(perc: number) {\r\n        if (perc > 200) return\r\n        perc = 200 - perc\r\n        TEMPO = perc / 100\r\n    }\r\n\r\n    //% block=\"transpose the tune with %distance note distance\"\r\n    //% block.loc.nl=\"transponeer the tune met %distance\" noot-afstand\"\r\n    //% distance.min=-127 distance.max=127\r\n    export function transpose(distance: number) {\r\n        TONE = Math.floor(distance);\r\n    }\r\n} // end namespace\r\n\r\nMidiController.setInstrument(1, 0)\r\nMidiController.setInstrument(2, 0)\r\nMidiController.setInstrument(3, 0)\r\nMidiController.setInstrument(4, 0)\r\nMidiController.setInstrument(5, 0)\r\n\r\nMidiController.setVolume(1, 64)\r\nMidiController.setVolume(2, 64)\r\nMidiController.setVolume(3, 64)\r\nMidiController.setVolume(4, 64)\r\nMidiController.setVolume(5, 64)\r\n\r\ninput.onButtonPressed(Button.A, function () {\r\n    MidiController.start()\r\n})\r\n\r\ninput.onButtonPressed(Button.B, function () {\r\n    MidiController.stop()\r\n})\r\n\r\nradio.onReceivedNumber(function (cmd: number) {\r\n    // 0: stop playing\r\n    // 1: start playing\r\n    // 2: pause on\r\n    // 3: pause off\r\n    // 4: repeat on\r\n    // 5: repeat off\r\n\r\n    // 100-500: transposing = value - 300\r\n\r\n    // 1000-1199: instrument partiture 1\r\n    // 1200-1399: instrument partiture 2\r\n    // 1400-1599: instrument partiture 3\r\n    // 1600-1799: instrument partiture 4\r\n    // 1800-1999: instrument partiture 5\r\n\r\n    // 2000-2199: volume partiture 1\r\n    // 2200-2399: volume partiture 2\r\n    // 2400-2599: volume partiture 3\r\n    // 2600-2799: volume partiture 4\r\n    // 2800-2999: volume partiture 5\r\n\r\n    // > 3000: duration = value - 3000\r\n\r\n    if (!cmd) MidiController.stop()\r\n    else\r\n        if (cmd == 1) MidiController.start()\r\n        else\r\n            if (cmd == 2) MidiController.pause(true)\r\n            else\r\n                if (cmd == 2) MidiController.pause(false)\r\n                else\r\n                    if (cmd == 3) MidiController.repeat(true)\r\n                    else\r\n                        if (cmd == 4) MidiController.repeat(false)\r\n                        else\r\n\r\n                            if (cmd <= 500) MidiController.transpose(cmd - 300)\r\n                            else\r\n\r\n                                if (cmd < 1200) MidiController.setInstrument(1, cmd - 1000)\r\n                                else\r\n                                    if (cmd < 1400) MidiController.setInstrument(2, cmd - 1200)\r\n                                    else\r\n                                        if (cmd < 1600) MidiController.setInstrument(3, cmd - 1400)\r\n                                        else\r\n                                            if (cmd < 1800) MidiController.setInstrument(4, cmd - 1600)\r\n                                            else\r\n                                                if (cmd < 2000) MidiController.setInstrument(5, cmd - 1800)\r\n                                                else\r\n\r\n                                                    if (cmd < 2200) MidiController.setVolume(1, cmd - 2000)\r\n                                                    else\r\n                                                        if (cmd < 2400) MidiController.setVolume(2, cmd - 2200)\r\n                                                        else\r\n                                                            if (cmd < 2600) MidiController.setVolume(3, cmd - 2400)\r\n                                                            else\r\n                                                                if (cmd < 2800) MidiController.setVolume(4, cmd - 2600)\r\n                                                                else\r\n                                                                    if (cmd < 3000) MidiController.setVolume(5, cmd - 2800)\r\n                                                                    else\r\n                                                                        MidiController.tempo(cmd - 3000)\r\n})\r\n\r\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"sdcard\": \"github:tinkertanker/pxt-microsd-microbit#2961d0d6b9b4cd93177c3ce3975af70f0a6c914e\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757957140499,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"sdcard\": \"github:tinkertanker/pxt-microsd-microbit#2961d0d6b9b4cd93177c3ce3975af70f0a6c914e\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757958949724,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"type handler = () => void\r\n\r\nlet pauseHandler: handler\r\n\r\npauseHandler = () => {\r\n\r\n}\r\n\r\npauseHandler()\r\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"sdcard\": \"github:tinkertanker/pxt-microsd-microbit#2961d0d6b9b4cd93177c3ce3975af70f0a6c914e\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757965399236,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"sdcard\": \"github:tinkertanker/pxt-microsd-microbit#2961d0d6b9b4cd93177c3ce3975af70f0a6c914e\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757968090714,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"//////////////////////\r\n//##################//\r\n//##              ##//\r\n//##  general.ts  ##//\r\n//##              ##//\r\n//##################//\r\n//////////////////////\r\n\r\nlet GROUP = 1\r\nlet WAVE = false\r\nlet WAVEWAIT = 1000\r\n\r\ntype handler = () => void\r\ntype msghandler = (value: number) => void\r\n\r\nlet messageHandler: msghandler\r\nfunction onMessage(code: msghandler) {\r\n    messageHandler = code;\r\n}\r\n\r\nlet displayHandler: handler\r\nfunction onDisplay(code: handler) {\r\n    displayHandler = code;\r\n}\r\n\r\nlet stopHandler: handler\r\nfunction onStop(code: handler) {\r\n    stopHandler = code;\r\n}\r\n\r\nlet resetHandler: handler\r\nfunction onReset(code: handler) {\r\n    resetHandler = code;\r\n}\r\n\r\nfunction displayGroup() {\r\n    basic.showNumber(GROUP)\r\n    basic.pause(500)\r\n    if (displayHandler) displayHandler()\r\n    else basic.showIcon(IconNames.Yes)\r\n}\r\n\r\ndisplayGroup()\r\n\r\nradio.onReceivedNumber(function (value: number) {\r\n    if (WAVE) basic.pause(WAVEWAIT)\r\n    if (messageHandler) messageHandler(value)\r\n})\r\n\r\nconst EVENTID = 200 + Math.randomRange(0, 100); // semi-unique\r\nlet EVENTCNT = 0\r\n\r\ncontrol.onEvent(EVENTID, 0, function () {\r\n    control.inBackground(() => {\r\n        EVENTCNT++\r\n        basic.showNumber(GROUP)\r\n        let tm = control.millis() + 1000\r\n        while (tm > control.millis()) basic.pause(1)\r\n        EVENTCNT--\r\n        if (!EVENTCNT) displayGroup()\r\n    })\r\n})\r\n\r\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\r\n    GROUP++\r\n    if (GROUP > 9) GROUP = 1\r\n    radio.setGroup(GROUP)\r\n    control.raiseEvent(EVENTID, 0)\r\n})\r\n\r\nenum Digital {\r\n    //% block=\"low\"\r\n    //% block.loc.nl=\"laag\"\r\n    Low,\r\n    //% block=\"high\"\r\n    //% block.loc.nl=\"hoog\"\r\n    High,\r\n}\r\n\r\nenum Move {\r\n    //% block=\"forward\"\r\n    //% block.loc.nl=\"vooruit\"\r\n    Forward,\r\n    //% block=\"backward\"\r\n    //% block.loc.nl=\"achteruit\"\r\n    Backward,\r\n}\r\n\r\nenum Rotate {\r\n    //% block=\"clockwise\"\r\n    //% block.loc.nl=\"rechtsom\"\r\n    Clockwise,\r\n    //% block=\"anticlockwise\"\r\n    //% block.loc.nl=\"linksom\"\r\n    AntiClockwise,\r\n}\r\n\r\nenum Pace {\r\n    //% block=\"fast\"\r\n    //% block.loc.nl=\"snelle\"\r\n    Fast,\r\n    //% block=\"normal\"\r\n    //% block.loc.nl=\"normale\"\r\n    Normal,\r\n    //% block=\"slow\"\r\n    //% block.loc.nl=\"langzame\"\r\n    Slow,\r\n}\r\n\r\nenum State {\r\n    //% block=\"off\"\r\n    //% block.loc.nl=\"uit\"\r\n    Off,\r\n    //% block=\"on\"\r\n    //% block.loc.nl=\"aan\"\r\n    On,\r\n}\r\n\r\n//% color=\"#61CBF4\" icon=\"\\uf075\"\r\n//% block=\"General\"\r\n//% block.loc.nl=\"Algemeen\"\r\nnamespace General {\r\n\r\n    //% color=\"#008800\"\r\n    //% block=\"comment: %dummy\"\r\n    //% block.loc.nl=\"uitleg: %dummy\"\r\n    //% dummy.defl=\"schrijf hier je uitleg\"\r\n    export function comment(dummy: string) {\r\n    }\r\n\r\n    //% block=\"turn %state the wave\"\r\n    //% block.loc.nl=\"zet de wave %state\"\r\n    export function waveOn(state: State) {\r\n        WAVE = (state == State.On);\r\n    }\r\n\r\n    //% block=\"wave after %sec seconds\"\r\n    //% block.loc.nl=\"wave na %sec seconden\"\r\n    export function setWave(delay: number) {\r\n        WAVEWAIT = delay * 1000\r\n    }\r\n\r\n    //% block=\"a number from %min upto %max\"\r\n    //% block.loc.nl=\"een getal van %min t/m %max\"\r\n    //% min.defl=0 max.defl=10\r\n    export function randomInt(min: number, max: number): number {\r\n        let i = 0\r\n        if (min > max) {\r\n            i = min\r\n            min = max\r\n            max = i\r\n        }\r\n        i = max - min + 1\r\n        i = min + Math.floor(Math.random() * i)\r\n        return i\r\n    }\r\n\r\n    //% block=\"wait %sec seconds\"\r\n    //% block.loc.nl=\"wacht %sec seconden\"\r\n    export function wait(sec: number) {\r\n        basic.pause(sec * 1000)\r\n    }\r\n}\r\n\r\n////////////////////\r\n//################//\r\n//##            ##//\r\n//##  color.ts  ##//\r\n//##            ##//\r\n//################//\r\n////////////////////\r\n\r\nenum Color {\r\n    //% block=\"none\"\r\n    //% block.loc.nl=\"geen\"\r\n    None,\r\n    //% block=\"red\"\r\n    //% block.loc.nl=\"rood\"\r\n    Red,\r\n    //% block=\"green\"\r\n    //% block.loc.nl=\"groen\"\r\n    Green,\r\n    //% block=\"blue\"\r\n    //% block.loc.nl=\"blauw\"\r\n    Blue,\r\n    //% block=\"yellow\"\r\n    //% block.loc.nl=\"geel\"\r\n    Yellow,\r\n    //% block=\"cyan\"\r\n    //% block.loc.nl=\"cyaan\"\r\n    Cyan,\r\n    //% block=\"magenta\"\r\n    //% block.loc.nl=\"magenta\"\r\n    Magenta,\r\n    //% block=\"black\"\r\n    //% block.loc.nl=\"zwart\"\r\n    Black,\r\n    //% block=\"dark grey\"\r\n    //% block.loc.nl=\"donkergrijs\"\r\n    DarkGrey,\r\n    //% block=\"grey\"\r\n    //% block.loc.nl=\"grijs\"\r\n    Grey,\r\n    //% block=\"light grey\"\r\n    //% block.loc.nl=\"lichtgrijs\"\r\n    LightGrey,\r\n    //% block=\"white\"\r\n    //% block.loc.nl=\"wit\"\r\n    White,\r\n    //% block=\"orange\"\r\n    //% block.loc.nl=\"oranje\"\r\n    Orange,\r\n    //% block=\"brown\"\r\n    //% block.loc.nl=\"bruin\"\r\n    Brown,\r\n    //% block=\"pink\"\r\n    //% block.loc.nl=\"roze\"\r\n    Pink,\r\n    //% block=\"indigo\"\r\n    //% block.loc.nl=\"indigo\"\r\n    Indigo,\r\n    //% block=\"violet\"\r\n    //% block.loc.nl=\"violet\"\r\n    Violet,\r\n    //% block=\"purple\"\r\n    //% block.loc.nl=\"paars\"\r\n    Purple\r\n}\r\n\r\nfunction fromColor(color: Color): number {\r\n    let val = 0\r\n    switch (color) {\r\n        case Color.Red: val = 0xFF0000; break;\r\n        case Color.Green: val = 0x00FF00; break;\r\n        case Color.Blue: val = 0x0000FF; break;\r\n        case Color.Yellow: val = 0xFFFF00; break;\r\n        case Color.Cyan: val = 0x00FFFF; break;\r\n        case Color.Magenta: val = 0xFF00FF; break;\r\n        case Color.Black: val = 0x000000; break;\r\n        case Color.DarkGrey: val = 0xA9A9A9; break;\r\n        case Color.Grey: val = 0x808080; break;\r\n        case Color.LightGrey: val = 0xD3D3D3; break;\r\n        case Color.White: val = 0xFFFFFF; break;\r\n        case Color.Orange: val = 0xFFA500; break;\r\n        case Color.Brown: val = 0xA52A2A; break;\r\n        case Color.Pink: val = 0xFFC0CB; break;\r\n        case Color.Indigo: val = 0x4b0082; break;\r\n        case Color.Violet: val = 0x8a2be2; break;\r\n        case Color.Purple: val = 0x800080; break;\r\n    }\r\n    return val\r\n}\r\n\r\nfunction fromRgb(red: number, green: number, blue: number): number {\r\n    let rgb = ((red & 0xFF) << 16) | ((green & 0xFF) << 8) | (blue & 0xFF)\r\n    return rgb;\r\n}\r\n\r\nfunction redValue(rgb: number): number {\r\n    let r = (rgb >> 16) & 0xFF;\r\n    return r;\r\n}\r\n\r\nfunction greenValue(rgb: number): number {\r\n    let g = (rgb >> 8) & 0xFF;\r\n    return g;\r\n}\r\n\r\nfunction blueValue(rgb: number): number {\r\n    let b = (rgb) & 0xFF;\r\n    return b;\r\n}\r\n\r\n///////////////////////\r\n//###################//\r\n//##               ##//\r\n//##  px-color.ts  ##//\r\n//##               ##//\r\n//###################//\r\n///////////////////////\r\n\r\n/*\r\nThe code below is a refactoring of:\r\n- the ElecFreaks 'pxt-PlanetX' library:\r\n  https://github.com/elecfreaks/pxt-PlanetX/blob/master/basic.ts\r\nBoth under MIT-license.\r\n*/\r\n\r\nnamespace PxColor {\r\n\r\n    function rgb2color(color_r: number, color_g: number, color_b: number): Color {\r\n        let R = color_r / 255;\r\n        let G = color_g / 255;\r\n        let B = color_b / 255;\r\n        let max = -1\r\n        let min = -1\r\n        let hue = 0\r\n\r\n        if (R > G && R > B) max = R\r\n        if (G > R && G > B) max = G\r\n        if (B > R && B > G) max = B\r\n        if (R < G && R < B) min = R\r\n        if (G < R && G < B) min = G\r\n        if (B < R && B < G) min = B\r\n\r\n        if (R == max) hue = (0 + (G - B) / (max - min)) * 60\r\n        if (G == max) hue = (2 + (B - R) / (max - min)) * 60\r\n        if (B == max) hue = (4 + (R - G) / (max - min)) * 60\r\n\r\n        if (hue < 0) hue += 360\r\n\r\n        // translate hue to color\r\n        if (hue == 0) return Color.White\r\n        if (hue < 5) return Color.Orange\r\n        if (hue < 30) return Color.Brown\r\n        if (hue < 100) return Color.Yellow\r\n        if (hue < 190) return Color.Green\r\n        if (hue < 206) return Color.Cyan\r\n        if (hue < 213) return Color.Blue\r\n        if (hue < 217) return Color.Black\r\n        if (hue < 230) return Color.Indigo\r\n        if (hue < 255) return Color.Purple\r\n        if (hue < 272) return Color.Pink\r\n        if (hue < 300) return Color.Magenta\r\n        return Color.Red\r\n    }\r\n\r\n    const APDS9960_ADDR = 0x39\r\n    const APDS9960_ENABLE = 0x80\r\n    const APDS9960_ATIME = 0x81\r\n    const APDS9960_CONTROL = 0x8F\r\n    const APDS9960_STATUS = 0x93\r\n    const APDS9960_CDATAL = 0x94\r\n    const APDS9960_CDATAH = 0x95\r\n    const APDS9960_RDATAL = 0x96\r\n    const APDS9960_RDATAH = 0x97\r\n    const APDS9960_GDATAL = 0x98\r\n    const APDS9960_GDATAH = 0x99\r\n    const APDS9960_BDATAL = 0x9A\r\n    const APDS9960_BDATAH = 0x9B\r\n    const APDS9960_GCONF4 = 0xAB\r\n    const APDS9960_AICLEAR = 0xE7\r\n\r\n    let color_first_init = false\r\n    let color_new_init = false\r\n\r\n    function i2cwrite_color(addr: number, reg: number, value: number) {\r\n        let buf = pins.createBuffer(2)\r\n        buf[0] = reg\r\n        buf[1] = value\r\n        pins.i2cWriteBuffer(addr, buf)\r\n    }\r\n\r\n    function i2cread_color(addr: number, reg: number) {\r\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\r\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\r\n        return val;\r\n    }\r\n\r\n    export function init() {\r\n\r\n        // init module\r\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\r\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\r\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\r\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\r\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\r\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\r\n        color_first_init = true\r\n\r\n        // set to color mode\r\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\r\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\r\n    }\r\n\r\n    export function read(): Color {\r\n        let buf = pins.createBuffer(2)\r\n        let c = 0\r\n        let r = 0\r\n        let g = 0\r\n        let b = 0\r\n        let temp_c = 0\r\n        let temp_r = 0\r\n        let temp_g = 0\r\n        let temp_b = 0\r\n        let temp = 0\r\n\r\n        if (color_new_init == false && color_first_init == false) {\r\n            let i = 0;\r\n            while (i++ < 15) {\r\n                buf[0] = 0x81\r\n                buf[1] = 0xCA\r\n                pins.i2cWriteBuffer(0x43, buf)\r\n                buf[0] = 0x80\r\n                buf[1] = 0x17\r\n                pins.i2cWriteBuffer(0x43, buf)\r\n                basic.pause(50);\r\n\r\n                if ((i2cread_color(0x43, 0xA4) + i2cread_color(0x43, 0xA5) * 256) != 0) {\r\n                    color_new_init = true\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (color_new_init == true) {\r\n            basic.pause(150);\r\n            c = i2cread_color(0x43, 0xA6) + i2cread_color(0x43, 0xA7) * 256;\r\n            r = i2cread_color(0x43, 0xA0) + i2cread_color(0x43, 0xA1) * 256;\r\n            g = i2cread_color(0x43, 0xA2) + i2cread_color(0x43, 0xA3) * 256;\r\n            b = i2cread_color(0x43, 0xA4) + i2cread_color(0x43, 0xA5) * 256;\r\n\r\n            r *= 1.3 * 0.47 * 0.83\r\n            g *= 0.69 * 0.56 * 0.83\r\n            b *= 0.80 * 0.415 * 0.83\r\n            c *= 0.3\r\n\r\n            if (r > b && r > g) {\r\n                b *= 1.18;\r\n                g *= 0.95\r\n            }\r\n\r\n            temp_c = c\r\n            temp_r = r\r\n            temp_g = g\r\n            temp_b = b\r\n\r\n            r = Math.min(r, 4095.9356)\r\n            g = Math.min(g, 4095.9356)\r\n            b = Math.min(b, 4095.9356)\r\n            c = Math.min(c, 4095.9356)\r\n\r\n            if (temp_b < temp_g) {\r\n                temp = temp_b\r\n                temp_b = temp_g\r\n                temp_g = temp\r\n            }\r\n        }\r\n        else {\r\n            if (color_first_init == false)\r\n                init()\r\n            let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\r\n            while (!tmp) {\r\n                basic.pause(5);\r\n                tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\r\n            }\r\n            c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\r\n            r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\r\n            g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\r\n            b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\r\n        }\r\n\r\n        // map to rgb based on clear channel\r\n        let avg = c / 3;\r\n        r = r * 255 / avg;\r\n        g = g * 255 / avg;\r\n        b = b * 255 / avg;\r\n\r\n        return rgb2color(r, g, b)\r\n    }\r\n}\r\n\r\nPxColor.init()\r\n\r\n////////////////////\r\n//################//\r\n//##            ##//\r\n//##  match.ts  ##//\r\n//##            ##//\r\n//################//\r\n////////////////////\r\n\r\n/* This is a basic extension for robot matches.\r\n * The robot-players, goals and arbiter must include\r\n * it to be able to send and respond to 'Match'-messages.\r\n * \r\n * The radio event handler 'onReceivedNumber' stores\r\n * the messages in variable 'MATCH' and calls the\r\n * accompanying handler. Dependent extensions should\r\n * register the handlers, for example:\r\n *   //% block=\"when playing do\"\r\n *   export function onPlay(code: handler) : void   {\r\n *       playHandler = code;\r\n *   }\r\n * or define the handlers, for example:\r\n *   playHander = () => { ...code... }\r\n * Of course, a handler needs to be registered only\r\n * when applicable. An arbiter does not need to\r\n * register the playHandler.\r\n * \r\n * IMPORTANT NOTE:\r\n * Dependent extensions should have the following line\r\n * of code as the first line of EACH loop:\r\n *   if (!isPlaying()) return;\r\n * This ensures a quick response to the messages.\r\n */\r\n\r\nenum Role {\r\n    //% block=\"GREEN\"\r\n    //% block.loc.nl=\"GROENE\"\r\n    PlayerGreen,\r\n    //% block=\"BLUE\"\r\n    //% block.loc.nl=\"BLAUWE\"\r\n    PlayerBlue,\r\n}\r\n\r\nenum MatchStatus {\r\n    Reset,\r\n    Stop,\r\n    Play,\r\n    GameOver,\r\n    PointGreen,\r\n    PointBlue,\r\n    DisallowGreen,\r\n    DisallowBlue,\r\n    DisqualGreen,\r\n    DisqualBlue\r\n}\r\n\r\nlet MATCH: MatchStatus = MatchStatus.Reset\r\nlet OLDMATCH: MatchStatus = MatchStatus.Reset\r\nlet ROLE: Role = Role.PlayerGreen\r\nlet POINTSGREEN: number = 0\r\nlet POINTSBLUE: number = 0\r\n\r\nlet playHandler: handler       // (re)starts playing\r\nlet pointHandler: handler      // increase points\r\nlet winnerHandler: handler     // end of game, player has won\r\n\r\nlet showPlayerColorHandler: handler\r\nfunction onShowPlayerColor(code: handler) {\r\n    showPlayerColorHandler = code;\r\n}\r\n\r\nfunction setPlayer() {\r\n    ROLE = Role.PlayerGreen\r\n    if (PxColor.read() == Color.Blue)\r\n        ROLE = Role.PlayerBlue\r\n}\r\nsetPlayer()\r\n\r\n// Use button A to set the player color manually\r\ninput.onButtonPressed(Button.A, function () {\r\n    if (ROLE == Role.PlayerGreen)\r\n        ROLE = Role.PlayerBlue\r\n    else\r\n        ROLE = Role.PlayerGreen\r\n    if (showPlayerColorHandler) showPlayerColorHandler()\r\n})\r\n\r\n// Use button B to read the player color from the color sensor\r\ninput.onButtonPressed(Button.B, function () {\r\n    setPlayer()\r\n    if (showPlayerColorHandler) showPlayerColorHandler()\r\n})\r\n\r\nbasic.forever(function () {\r\n    if ((MATCH == MatchStatus.Play) && playHandler)\r\n        playHandler()\r\n})\r\n\r\nfunction display() {\r\n    basic.pause(1000)\r\n    if (ROLE == Role.PlayerGreen)\r\n        basic.showString(\"G\")\r\n    else\r\n        basic.showString(\"B\")\r\n}\r\n\r\nonDisplay(() => {\r\n    display()\r\n})\r\n\r\nonMessage((matchstatus: number) => {\r\n    MATCH = matchstatus\r\n    switch (MATCH) {\r\n        case MatchStatus.Reset:\r\n            POINTSGREEN = 0\r\n            POINTSBLUE = 0\r\n            if (stopHandler) stopHandler()\r\n            if (resetHandler) resetHandler()\r\n            break\r\n        case MatchStatus.Stop:\r\n            if (stopHandler) stopHandler()\r\n            break\r\n        // MatchStatus.play is handled above in a forever loop.\r\n        // Furthermore, to ensure quick responses to messages,\r\n        // dependent extension should check the playing status\r\n        // in EACH loop of the onPlay code by inserting the\r\n        // next code as first line:\r\n        //       'if (!isPlaying()) return'\r\n        case MatchStatus.GameOver:\r\n            if (ROLE == Role.PlayerGreen) {\r\n                basic.showNumber(POINTSGREEN)\r\n                if ((POINTSGREEN > POINTSBLUE) && winnerHandler)\r\n                    winnerHandler()\r\n            }\r\n            if (ROLE == Role.PlayerBlue) {\r\n                basic.showNumber(POINTSBLUE)\r\n                if ((POINTSBLUE > POINTSGREEN) && winnerHandler)\r\n                    winnerHandler()\r\n            }\r\n            if (resetHandler) resetHandler()\r\n            break\r\n        case MatchStatus.PointGreen:\r\n            POINTSGREEN += 1\r\n            if (ROLE == Role.PlayerGreen) {\r\n                basic.showNumber(POINTSGREEN)\r\n                if (pointHandler) pointHandler()\r\n            }\r\n            display()\r\n            if (stopHandler) stopHandler()\r\n            break\r\n        case MatchStatus.PointBlue:\r\n            POINTSBLUE += 1\r\n            if (ROLE == Role.PlayerBlue) {\r\n                basic.showNumber(POINTSBLUE)\r\n                if (pointHandler) pointHandler()\r\n            }\r\n            display()\r\n            if (stopHandler) stopHandler()\r\n            break\r\n        case MatchStatus.DisallowGreen:\r\n            POINTSGREEN -= 1\r\n            if (ROLE == Role.PlayerGreen) {\r\n                basic.showNumber(POINTSGREEN)\r\n            }\r\n            display()\r\n            MATCH = OLDMATCH\r\n            break\r\n        case MatchStatus.DisallowBlue:\r\n            POINTSBLUE -= 1\r\n            if (ROLE == Role.PlayerBlue) {\r\n                basic.showNumber(POINTSBLUE)\r\n            }\r\n            display()\r\n            MATCH = OLDMATCH\r\n            break\r\n        case MatchStatus.DisqualGreen:\r\n            POINTSGREEN = 0\r\n            basic.showNumber(POINTSGREEN)\r\n            if (ROLE == Role.PlayerGreen) {\r\n                if ((POINTSGREEN > POINTSBLUE) && winnerHandler)\r\n                    winnerHandler()\r\n            }\r\n            if (ROLE == Role.PlayerBlue) {\r\n                if ((POINTSBLUE > POINTSGREEN) && winnerHandler)\r\n                    winnerHandler()\r\n            }\r\n            if (resetHandler) resetHandler()\r\n            break\r\n        case MatchStatus.DisqualBlue:\r\n            POINTSBLUE = 0\r\n            basic.showNumber(POINTSBLUE)\r\n            if (ROLE == Role.PlayerGreen) {\r\n                if ((POINTSGREEN > POINTSBLUE) && winnerHandler)\r\n                    winnerHandler()\r\n            }\r\n            if (ROLE == Role.PlayerBlue) {\r\n                if ((POINTSBLUE > POINTSGREEN) && winnerHandler)\r\n                    winnerHandler()\r\n            }\r\n            if (resetHandler) resetHandler()\r\n            break\r\n    }\r\n    OLDMATCH = MATCH\r\n})\r\n\r\n//% color=\"#00CC00\" icon=\"\\uf091\"\r\n//% block=\"Match\"\r\n//% block.loc.nl=\"Wedstrijd\"\r\nnamespace Match {\r\n\r\n    //% block=\"be the %role player\"\r\n    //% block.loc.nl=\"wees de %role speler\"\r\n    export function setRole(role: Role) {\r\n        ROLE = role\r\n    }\r\n\r\n\t//% block=\"this is the %role player\"\r\n\t//% block.loc.nl=\"dit is de %role speler\"\r\n\texport function isPlayer(role: Role): boolean {\r\n        return (ROLE == role)\r\n    }\r\n\r\n    //% block=\"the game is in progress\"\r\n    //% block.loc.nl=\"het spel bezig is\"\r\n    export function isPlaying(): boolean {\r\n        return (MATCH == MatchStatus.Play)\r\n    }\r\n\r\n    //% color=\"#FFCC00\"\r\n    //% block=\"code for the winner to celebrat\"\r\n    //% block.loc.nl=\"code om het winnen te vieren\"\r\n    export function onWinner(code: () => void): void {\r\n        winnerHandler = code\r\n    }\r\n\r\n    //% color=\"#FFCC00\"\r\n    //% block=\"code for celebrating a goal\"\r\n    //% block.loc.nl=\"code om een doelpunt te vieren\"\r\n    export function onPoint(code: () => void): void {\r\n        pointHandler = code\r\n    }\r\n\r\n    //% color=\"#FFCC00\"\r\n    //% block=\"code for playing\"\r\n    //% block.loc.nl=\"code om te voetballen\"\r\n    export function onPlay(code: () => void): void {\r\n        playHandler = code;\r\n    }\r\n}","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"sdcard\": \"github:tinkertanker/pxt-microsd-microbit#2961d0d6b9b4cd93177c3ce3975af70f0a6c914e\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1757968146956}